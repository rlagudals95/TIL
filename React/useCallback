# useCallback

useCallback은 함수를 메모제이션해 컴포넌트의 재렌더링 시 
함수가 재선언 되지 않게 하는 리액트에서 제공하는 훅입니다.


## 1. 함수에 useCallback 적용하기

```React
const handleClickStartFree = useCallback(() => {
    logIn();
}, [logIn]);
```

## 2. 매개변수가 필요한 경우

리액트 공식문서에 loop 내에서 매개변수가 필요한 핸들러의 경우에 핸들러를 등록할 컴포넌트를 별도의 컴포넌트로 선언하고
그안에 핸들러의 매개변수를 props로 받아 useCallback 내에서 사용하는 방법으로 소개되어 있습니다.

```React
function ReportList({ items }) {
  return (
    <article>
      {items.map(item =>
        <Report key={item.id} item={item} />
      )}
    </article>
  );
}

function Report({ item }) {
  // ✅ Call useCallback at the top level:
  const handleClick = useCallback(() => {
    sendReport(item)
  }, [item]);

  return (
    <figure>
      <Chart onClick={handleClick} />
    </figure>
  );
}
```


# Reference

[React 공식 문서](https://react.dev/reference/react/useCallback#optimizing-a-custom-hook)
